{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "previousAdmin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "AdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "beacon",
						"type": "address"
					}
				],
				"name": "BeaconUpgraded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_certificateId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "CertificateMigratedToPublic",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_commitment",
						"type": "bytes32"
					}
				],
				"name": "CommitmentUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "version",
						"type": "uint8"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "MigrateToPublicRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_certificateId",
						"type": "uint256"
					}
				],
				"name": "PrivateCertificationRequestApproved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_certificateId",
						"type": "uint256"
					}
				],
				"name": "PrivateTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "Upgraded",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_requestId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_commitment",
						"type": "bytes32"
					}
				],
				"name": "approveCertificationRequestPrivate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_certificateId",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "bool",
								"name": "left",
								"type": "bool"
							},
							{
								"internalType": "bytes32",
								"name": "hash",
								"type": "bytes32"
							}
						],
						"internalType": "struct PrivateIssuer.Proof[]",
						"name": "_proof",
						"type": "tuple[]"
					},
					{
						"internalType": "bytes32",
						"name": "_previousCommitment",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_commitment",
						"type": "bytes32"
					}
				],
				"name": "approvePrivateTransfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "certificateId",
						"type": "uint256"
					}
				],
				"name": "getCertificateCommitment",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getIssuerAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_requestId",
						"type": "uint256"
					}
				],
				"name": "getMigrationRequest",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "certificateId",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "hash",
								"type": "bytes32"
							},
							{
								"internalType": "bool",
								"name": "approved",
								"type": "bool"
							}
						],
						"internalType": "struct PrivateIssuer.RequestStateChange",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_certificateId",
						"type": "uint256"
					}
				],
				"name": "getMigrationRequestId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_migrationRequestId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_certificateId",
						"type": "uint256"
					}
				],
				"name": "getPrivateTransferRequest",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "bytes32",
								"name": "hash",
								"type": "bytes32"
							}
						],
						"internalType": "struct PrivateIssuer.PrivateTransferRequest",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_issuer",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_commitment",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "issuePrivate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "issuer",
				"outputs": [
					{
						"internalType": "contract Issuer",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_volume",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_salt",
						"type": "string"
					},
					{
						"components": [
							{
								"internalType": "bool",
								"name": "left",
								"type": "bool"
							},
							{
								"internalType": "bytes32",
								"name": "hash",
								"type": "bytes32"
							}
						],
						"internalType": "struct PrivateIssuer.Proof[]",
						"name": "_proof",
						"type": "tuple[]"
					}
				],
				"name": "migrateToPublic",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proxiableUUID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "registry",
				"outputs": [
					{
						"internalType": "contract Registry",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_certificateId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_ownerAddressLeafHash",
						"type": "bytes32"
					}
				],
				"name": "requestMigrateToPublic",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_migrationRequestId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_certificateId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_ownerAddressLeafHash",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_forAddress",
						"type": "address"
					}
				],
				"name": "requestMigrateToPublicFor",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_migrationRequestId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_certificateId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_ownerAddressLeafHash",
						"type": "bytes32"
					}
				],
				"name": "requestPrivateTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					}
				],
				"name": "upgradeTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "upgradeToAndCall",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Private certificate issuance differ from the public ones in a way that the fungible volumes that are being transferred/claimed are stored off-chain.",
			"kind": "dev",
			"methods": {
				"initialize(address)": {
					"details": "Uses the OpenZeppelin `initializer` for upgradeability.`_issuer` cannot be the zero address."
				},
				"migrateToPublic(uint256,uint256,string,(bool,bytes32)[])": {
					"params": {
						"_proof": "Precise Proof.",
						"_requestId": "Migration Request ID.",
						"_salt": "Precise Proof salt.",
						"_volume": "Volume that should be minted."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"proxiableUUID()": {
					"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"requestMigrateToPublic(uint256,bytes32)": {
					"params": {
						"_certificateId": "Certificate that you want to migrate to public.",
						"_ownerAddressLeafHash": "Final balance proof."
					}
				},
				"requestMigrateToPublicFor(uint256,bytes32,address)": {
					"params": {
						"_certificateId": "Certificate that you want to migrate to public.",
						"_forAddress": "Owner.",
						"_ownerAddressLeafHash": "Final balance proof."
					}
				},
				"requestPrivateTransfer(uint256,bytes32)": {
					"params": {
						"_certificateId": "Certificate that you want to change the balances of.",
						"_ownerAddressLeafHash": "New updated proof (balances per address)."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"upgradeTo(address)": {
					"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				},
				"upgradeToAndCall(address,bytes)": {
					"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				}
			},
			"title": "Contract for private issuances.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approvePrivateTransfer(uint256,(bool,bytes32)[],bytes32,bytes32)": {
					"notice": "Approve a private transfer of certificates."
				},
				"getCertificateCommitment(uint256)": {
					"notice": "Get the commitment (proof) for a specific certificate."
				},
				"getMigrationRequest(uint256)": {
					"notice": "Get the migration request."
				},
				"getMigrationRequestId(uint256)": {
					"notice": "Get the migration request ID for a specific certificate."
				},
				"getPrivateTransferRequest(uint256)": {
					"notice": "Get the private transfer request that is currently active for a specific certificate."
				},
				"initialize(address)": {
					"notice": "Constructor."
				},
				"issuePrivate(address,bytes32,bytes)": {
					"notice": "Directly issue a private certificate."
				},
				"migrateToPublic(uint256,uint256,string,(bool,bytes32)[])": {
					"notice": "Migrate a private certificate to be public."
				},
				"requestMigrateToPublic(uint256,bytes32)": {
					"notice": "Request the certificate volumes to be migrated from private to public."
				},
				"requestMigrateToPublicFor(uint256,bytes32,address)": {
					"notice": "Request the certificate volumes to be migrated from private to public for someone else."
				},
				"requestPrivateTransfer(uint256,bytes32)": {
					"notice": "Request transferring a certain amount of tokens."
				}
			},
			"notice": "A privately issued certificate can later be migrated to be public.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/PrivateIssuer.sol": "PrivateIssuer"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888",
			"license": "MIT",
			"urls": [
				"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a",
				"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb"
			]
		},
		"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
			"keccak256": "0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f",
			"license": "MIT",
			"urls": [
				"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053",
				"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
			"keccak256": "0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823",
			"license": "MIT",
			"urls": [
				"bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2",
				"dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
			"keccak256": "0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908",
			"license": "MIT",
			"urls": [
				"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1",
				"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27",
			"license": "MIT",
			"urls": [
				"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935",
				"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
			"keccak256": "0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778",
			"license": "MIT",
			"urls": [
				"bzz-raw://40e60cbf0e2efede4d9c169e66336a64615af7b719a896ef1f37ae8cd4614ec1",
				"dweb:/ipfs/QmYNiwY22ifhfa8yK6mLCEKfj39caYUHLqe2VBtzDnvdsV"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183",
			"license": "MIT",
			"urls": [
				"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06",
				"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
				"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
			"keccak256": "0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a",
			"license": "MIT",
			"urls": [
				"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3",
				"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
			"keccak256": "0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820",
			"license": "MIT",
			"urls": [
				"bzz-raw://7a5e5b99830cf233f77aa3b1bd1f57561faee103beeee88e6a6f86d044817bbb",
				"dweb:/ipfs/QmREYidSDpHPig3AhxzsMHg3w2ZtMeGfRhcokXxEZyj6fC"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
			"keccak256": "0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd9c47a375639888e726a99da718890ba16d17d7ad9eacb0ccc892d46d1b3ee0",
				"dweb:/ipfs/Qmb41W5RUjy2sWg49A2rMnxekSeEk6SvGyJL5tyCCSr7un"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://0e28648f994abf1d6bc345644a361cc0b7efa544f8bc0c8ec26011fed85a91ec",
				"dweb:/ipfs/QmVVE7AiRjKaQYYji7TkjmTeVzGpNmms5eoxqTCfvvpj6D"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
			"keccak256": "0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574",
			"license": "MIT",
			"urls": [
				"bzz-raw://e46c80ea068989111d6103e5521223f9ef337e93de76deed8b03f75c6f7b2797",
				"dweb:/ipfs/QmNoSE6knNfFncdDDLTb3fGR6oSQty1srG96Vsx3E9wQdw"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
				"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"contracts/ERC1888/IERC1888.sol": {
			"keccak256": "0xd367422cdce7b868715297301008fdf1ccc0c4f352a1a1d46e457b284a843b5e",
			"license": "MIT",
			"urls": [
				"bzz-raw://3f7d08d6c0fa61d5b7ffb86480304d354a226d51d3f9e426f000d23747ef8351",
				"dweb:/ipfs/QmdxkBxTS1sK37YVRZqtTaV1awVxpc2FY9XpFeum4NWKvx"
			]
		},
		"contracts/Issuer.sol": {
			"keccak256": "0xd232eb90fe6e18b9b311dfe6d3c0cbc0cb4cd5737bf38af3f68adbdd383148d5",
			"license": "MIT",
			"urls": [
				"bzz-raw://51c7c68490550a24244a7a050a46a463abd2643891bf41dd57f1f28d98068bc8",
				"dweb:/ipfs/QmYrX2WU9g8b1EAyezHNosZLbmspLFbe8JXtPbnB85JdAc"
			]
		},
		"contracts/PrivateIssuer.sol": {
			"keccak256": "0x1e478c006306eae3c676055158aefb9f79c6930700e85e3cc399e442ca6deb5f",
			"license": "MIT",
			"urls": [
				"bzz-raw://d488ec7af500c0228cd8642828dd889e881006d1d57a1abf41455ccd87e5da72",
				"dweb:/ipfs/QmQHFddxBPWTQeUAsz36fXT84S1fV9j2imL4gwDcHU9bn9"
			]
		},
		"contracts/Registry.sol": {
			"keccak256": "0x9ba993fcbbd0dd2d0005c6c27cb7b2dceee3bf6d88b8221cf2705c6cc3622ac0",
			"license": "MIT",
			"urls": [
				"bzz-raw://69c1e1002db8c345f212bda540a57e04fa1fcb4bd18fa2762514e76523a4bd03",
				"dweb:/ipfs/QmYDF5AmHfeX47BZRytBC4Rd5aJBachhroH2di29G9nhhf"
			]
		},
		"contracts/RegistryExtended.sol": {
			"keccak256": "0xe786c3ccbd7c92a38d89109113be8ccb7c9b97d7f08bb2c19e19e03bd5470143",
			"license": "MIT",
			"urls": [
				"bzz-raw://f572ac8a04f805b93eb0cd944889168a8e3f553995aac95aa912bce0ddd5b2c4",
				"dweb:/ipfs/Qmcy82Y1LG8KBFe6AA7t9xWooAUbkPwoZmiiZRa8nC2pEx"
			]
		}
	},
	"version": 1
}